{"version":3,"sources":["api/api.js","component/AbilityCard/AbilityCard.jsx","component/PokemonCard/PokemonCard.jsx","component/PokemonList/PokemoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","request","baseUrl","path","a","fetch","response","json","pockemonList","results","getPokemonImgUrl","id","getPokemonByName","name","AbilityCard","imgUrl","pokemonStats","types","weight","moves","stats","findStat","statName","find","stat","className","src","alt","map","type","charAt","toUpperCase","slice","slot","base_stat","length","PokemonCard","loadPokemonByName","loadImgUrl","getPokemonStats","isVisibleAbilityCard","useState","pokemon","setPokemon","useEffect","onClick","e","onClickHandler","classname","PokemonList","pokemonList","setPokemonList","visibleAbility","setVisibleStatus","setTmgUrl","setPokemnStats","limitOfPokemon","offSet","setOffSet","loadPokemonFromServer","offset","pokemonFromServer","callback","state","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8177633.chunk.js","sourcesContent":["const BASE_URL = 'https://pokeapi.co/api/v2/pokemon/';\nconst IMG_URL = 'https://pokeres.bastionbot.org/images/pokemon/';\nconst TYPE_URL = 'https://pokeapi.co/api/v2/type';\n\nconst request = async(baseUrl, path) => {\n  const response = await fetch(`${baseUrl}${path}`);\n\n  const pockemonList = await response.json();\n\n  return pockemonList.results;\n}\n\nexport const getIdFromUrl  = async(url) => {\n  const response = await fetch(url);\n\n  const result = await response.json();\n\n  return result.results;\n}\nexport const getPokemonWithLimit = (limit, offset) => request(BASE_URL,`?limit=${limit}&offset=${offset}`);\nexport const getPokemonImgUrl = (id) => `${IMG_URL}${id}.png`;\nexport const getPokemonType = (id) => request(TYPE_URL, id);\n\nexport const getPokemonByName = async(name) => {\n  const response = await fetch(`${BASE_URL}${name}`);\n\n  return response.json()\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './abilityCard.scss';\n\nexport const AbilityCard = ({ imgUrl, pokemonStats }) => {\n  const {\n    name,\n    types,\n    weight,\n    moves,\n    stats,\n  } = pokemonStats;\n\n  const findStat = (statName) => {\n    return stats.find(stat => stat.stat.name === statName);\n  }\n\n  return (\n    <div className=\"ability_card\">\n      <img\n        src={imgUrl}\n        alt=\"pokemon\"\n        className=\"ability_card__img\"\n      />\n      <strong className=\"ability_card__name\">{name}</strong>\n      <table className=\"table is-bordered ability_card__table\">\n        <tr>\n          <td className=\"table__td\">Type</td>\n          <td>{types.map(type => (\n            <span className=\"ability_card__type\" key={type.slot}>{type.type.name.charAt(0).toUpperCase() + type.type.name.slice(1)}</span>\n          ))}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">Attack</td>\n          <td>{findStat('attack').base_stat}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">Defense</td>\n          <td>{findStat('defense').base_stat}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">HP</td>\n          <td>{findStat('hp').base_stat}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">SP Attack</td>\n          <td>{findStat('special-attack').base_stat}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">SP Defense</td>\n          <td>{findStat('defense').base_stat}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">Speed</td>\n          <td>{findStat('speed').base_stat}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">Weight</td>\n          <td>{weight}</td>\n        </tr>\n        <tr>\n          <td className=\"table__td\">Total Moves</td>\n          <td>{moves.length}</td>\n        </tr>\n\n      </table>\n    </div>\n  );\n}\n\nAbilityCard.propTypes = {\n  imgUrl: PropTypes.string.isRequired,\n  pokemonStats: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    types: PropTypes.array.isRequired,\n    weight: PropTypes.number.isRequired,\n    moves: PropTypes.array.isRequired,\n    stats: PropTypes.array.isRequired,\n  }).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPokemonImgUrl } from '../../api/api';\nimport PropTypes from 'prop-types';\nimport classname from 'classnames';\nimport './pokemon_card.scss';\n\nexport const PokemonCard = ({\n  name,\n  loadPokemonByName,\n  loadImgUrl,\n  getPokemonStats,\n  isVisibleAbilityCard,\n}) => {\n  const [pokemon, setPokemon] = useState(null);\n\n  useEffect(() => {\n    loadPokemonByName(name, setPokemon);\n  }, [name, loadPokemonByName]);\n\n  const onClickHandler = (pokemon) => {\n    isVisibleAbilityCard(true);\n    loadImgUrl(pokemon.id);\n\n    const {\n      name,\n      types,\n      weight,\n      moves,\n      stats,\n    } = pokemon;\n\n    getPokemonStats({\n      name,\n      types,\n      weight,\n      moves,\n      stats,\n    })\n  }\n\n  return (\n    <div\n      className=\"pokemon_card\"\n      onClick={(e) => (onClickHandler(pokemon, e))}\n    >\n      {(pokemon)\n        ?\n        ( <>\n            <img\n              className=\"pokemon_card__img\"\n              src={getPokemonImgUrl(pokemon.id)}\n              alt={`${pokemon.name}`}\n            />\n            <span\n              className=\"pokemon_card__name\">\n              {pokemon.name}\n            </span>\n            <div className=\"pokemon_card__type\">\n              {pokemon.types.map(type => (\n                <span\n                  key={type.slot}\n                  className={classname('pokemon_card__type_name', type.type.name, {\n                    'pokemon_card__type_name--fire': type.type.name === 'fire',\n                    'pokemon_card__type_name--poison': type.type.name === 'poison',\n                    'pokemon_card__type_name--grass': type.type.name === 'grass',\n                    'pokemon_card__type_name--water': type.type.name === 'water',\n                    'pokemon_card__type_name--electic': type.type.name === 'electric',\n                    'pokemon_card__type_name--fairy': type.type.name === 'fairy',\n                    'pokemon_card__type_name--normal': type.type.name === 'normal',\n                    'pokemon_card__type_name--flying': type.type.name === 'flying',\n                    'pokemon_card__type_name--bug': type.type.name === 'bug',\n                    'pokemon_card__type_name--ground': type.type.name === 'ground',\n                    'pokemon_card__type_name--fighting': type.type.name === 'fighting',\n                    'pokemon_card__type_name--psychic': type.type.name === 'psychic',\n                  })}>\n                    {type.type.name}\n                  </span>\n              ))}\n            </div>\n          </>\n        )\n        : (`Loading....`) }\n    </div>\n  )\n}\n\nPokemonCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  loadPokemonByName: PropTypes.func.isRequired,\n  loadImgUrl: PropTypes.func.isRequired,\n  getPokemonStats: PropTypes.func.isRequired,\n  isVisibleAbilityCard: PropTypes.func.isRequired,\n}","import React, { useEffect, useState } from 'react';\nimport { getPokemonWithLimit, getPokemonByName, getPokemonImgUrl } from '../../api/api';\nimport { AbilityCard } from '../AbilityCard';\nimport { PokemonCard } from '../PokemonCard';\nimport './pokemon_list.scss'\n\nexport const PokemonList = () => {\n  const [pokemonList, setPokemonList] = useState([]);\n  const [visibleAbility, setVisibleStatus] = useState(false);\n  const [imgUrl, setTmgUrl] = useState('');\n  const [pokemonStats, setPokemnStats] = useState(null);\n  const [limitOfPokemon] = useState(12);\n  const [offSet, setOffSet] = useState(0);\n\n  const loadPokemonFromServer = async() => {\n    const pokemonFromServer = await getPokemonWithLimit(limitOfPokemon, offSet);\n\n    setPokemonList(pokemonFromServer);\n  }\n\n  const loadPokemonByName = async(name, callback) => {\n    const response = await getPokemonByName(name);\n\n    callback(response);\n  }\n\n  const isVisibleAbilityCard = () => {\n    setVisibleStatus(true);\n  }\n\n  const loadImgUrl = (imgUrl) => {\n    setTmgUrl(getPokemonImgUrl(imgUrl));\n  }\n\n  const getPokemonStats = (stats) => {\n    setPokemnStats(stats);\n  }\n\n  useEffect(() => {\n    loadPokemonFromServer();\n  }, [offSet])\n\n  const handleButton = () => {\n    setOffSet(state => state + 12)\n  }\n\n  return (\n    <>\n      <div className=\"pokemon_list\">\n        {pokemonList.map(pokemon => (\n          <PokemonCard\n            key={pokemon.name}\n            name={pokemon.name}\n            loadPokemonByName={loadPokemonByName}\n            isVisibleAbilityCard={isVisibleAbilityCard}\n            loadImgUrl={loadImgUrl}\n            getPokemonStats={getPokemonStats}\n          />\n        ))}\n        <button\n          className=\"button is-info is-outlined my_button\"\n          onClick={handleButton}\n        >\n          load more\n        </button>\n      </div>\n      <div className=\"ability_block\">\n        {(visibleAbility) &&\n          (<AbilityCard\n              imgUrl={imgUrl}\n              pokemonStats={pokemonStats}\n         />)\n        }\n      </div>\n    </>\n  );\n}","import { PokemonList } from './component/PokemonList';\nimport 'bulma';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <main className=\"app\">\n      <h1 className=\"app__title\">Pokedex</h1>\n      <div className=\"app__body\">\n        <PokemonList />\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}